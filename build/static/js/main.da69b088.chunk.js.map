{"version":3,"sources":["serviceWorker.js","redux/reducers/weatherReducer.js","redux/reducers/index.js","redux/sagas/weatherSaga.js","redux/sagas/index.js","components/SearchInput/SearchInput.js","components/WeatherItem/WeatherItem.js","components/Map/Map.js","components/WeatherDisplay/WeatherDisplay.js","components/App/App.js","index.js"],"names":["Boolean","window","location","hostname","match","weatherReducer","state","arguments","length","undefined","action","type","concat","Object","toConsumableArray","payload","data","filter","item","city","id","rootReducer","combineReducers","weather","getWeather","weatherSaga","searchString","weatherList","regenerator_default","a","wrap","_context","prev","next","replace","call","axios","get","sent","dispatch","t0","console","log","stop","_marked","this","_context2","takeEvery","_marked2","rootSaga","all","sagas_marked","Form","query","locality","list","clearInput","_this","setState","handleChange","event","target","value","handleClick","e","preventDefault","validateInputField","props","push","localStorage","setItem","JSON","stringify","alert","handleScriptLoad","autocomplete","google","maps","places","Autocomplete","document","getElementById","types","addListener","handlePlaceSelect","addressObject","getPlace","address","address_components","formatted_address","long_name","react_default","createElement","Fragment","lib_default","url","onLoad","Input","onChange","name","placeholder","Button","onClick","Component","styled","input","_templateObject","button","_templateObject2","connect","store","cityList","WeatherItem","className","classList","style","paddingLeft","marginRight","fontSize","whiteSpace","height","fontWeight","date","textTransform","fontStyle","description","pStyle","maxTemp","minTemp","marginTop","MyMapComponent","withGoogleMap","react_google_maps_lib","defaultZoom","defaultCenter","lat","lng","lon","Map","googleMapURL","loadingElement","containerElement","mapElement","WeatherDisplay","getRoundedNumber","num","Math","round","removeCity","cityId","_this2","map","ci","i","key","WeatherDisplay_Button","display","flexDirection","temp","components_WeatherItem_WeatherItem","dt","moment","dt_txt","format","main","temp_max","temp_min","components_Map_Map","coord","WeatherDisplay_templateObject","App","Wrapper","SearchInput","components_WeatherDisplay_WeatherDisplay","div","App_templateObject","sagaMiddleware","createSagaMiddleware","middlewareList","createStore","applyMiddleware","apply","run","ReactDOM","render","es","components_App_App","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.da69b088.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","const weatherReducer = (state = [], action) => {\n  switch(action.type) {\n    case 'STORE_WEATHER':\n      return [...state,\n          action.payload.data];\n    case 'REMOVE_CITY':\n        return state.filter(item => item.city.id !== action.payload);\n    default:\n      return state;\n  }\n}\n\nexport default weatherReducer;","import { combineReducers } from 'redux';\nimport weather from './weatherReducer';\n\nconst rootReducer = combineReducers({\n  weather\n});\n\nexport default rootReducer;","import { takeEvery, call, put as dispatch } from 'redux-saga/effects';\nimport axios from 'axios';\n\nfunction* getWeather(action) {\n  try {\n    const searchString = action.payload.replace(/\\s+/g, '+');\n    const weatherList = yield call(axios.get, `/api/search?q=${searchString}`);\n    yield dispatch({ type: 'STORE_WEATHER', payload: weatherList });\n  } catch (error) {\n    console.log(`Weather featch failed ${error}`)\n  }\n}\n\nfunction* weatherSaga() {\n  yield takeEvery('FETCH_WEATHER', getWeather);\n}\n\nexport default weatherSaga;","import { all } from 'redux-saga/effects';\nimport weatherSaga from './weatherSaga';\n\nexport default function* rootSaga() {\n  yield all([\n    weatherSaga(),\n  ]);\n}\n","import React, { Component } from 'react';\nimport styled from 'styled-components';\nimport { connect } from 'react-redux';\n\nimport Script from 'react-load-script';\n\nclass Form extends Component {\n  state = {\n    city: '',\n    query: '',\n    locality: '',\n    list: []\n  }\n\n  clearInput = () => {\n    this.setState({\n      city: '',\n      query: '',\n      locality: ''\n    })\n  }\n\n  handleChange = (event) => {\n    this.setState({\n      locality: event.target.value\n    })\n  }\n\n  handleClick = (e) => {\n    e.preventDefault(e);\n    this.validateInputField();\n    if (this.state.locality === '') {\n      return;\n    }\n\n    this.props.dispatch({ type: 'FETCH_WEATHER', payload: this.state.locality });\n    \n    const list = [...this.state.list];\n    list.push(this.state.locality);\n\n    this.setState({\n      list\n    })\n\n    // Update localStorage\n    localStorage.setItem(\"city\", JSON.stringify(this.state.list));\n    alert('New city added!');\n    this.clearInput();\n  }\n\n  handleScriptLoad = e => {\n    // Declare Options For Autocomplete\n    var options = {\n      types: ['(cities)'],\n    };\n\n    // Initialize Google Autocomplete\n    /*global google*/ // To disable any eslint 'google not defined' errors\n    this.autocomplete = new google.maps.places.Autocomplete(\n      document.getElementById('autocomplete'),\n      options,\n    );\n\n    // Fire Event when a suggested name is selected\n    this.autocomplete.addListener('place_changed', this.handlePlaceSelect);\n  }\n\n  handlePlaceSelect = e => {\n\n    // Extract City From Address Object\n    let addressObject = this.autocomplete.getPlace();\n    let address = addressObject.address_components;\n\n    document.getElementById('autocomplete').value = addressObject.formatted_address;\n    // Check if address is valid\n    if (address) {\n      // Set State\n      this.setState(\n        {\n          locality: addressObject.formatted_address,\n          city: address[0].long_name\n        }\n      );\n    }\n  }\n\n  validateInputField = () => {\n    if (this.state.locality === '') {\n      alert('Please enter a city');\n      return false;\n    }\n  }\n\n  render() {\n    return (\n      <>\n        <Script\n          url='https://maps.googleapis.com/maps/api/js?v=3.exp&key=AIzaSyCYqcIHpBnvZKTUX6K-mT7DY-nze22Dcms&libraries=places'\n          onLoad={this.handleScriptLoad}\n        />\n        <Input id=\"autocomplete\" onChange={this.handleChange} value={this.state.locality} type=\"text\" name=\"city\" placeholder=\"Enter city\" />\n        <Button onClick={this.handleClick}>Add City</Button>\n      </>\n    )\n  }\n}\n\nconst Input = styled.input`\n  margin-top: 20px;\n  border: 1px solid #aaaaaa;\n  margin-right: 12px;\n  width: 200px;\n  height: 30px;\n  padding: 5px;\n  outline: none;\n  border-radius: 3px;\n  font-size: 1rem;\n`;\n\nconst Button = styled.button`\n  background: #2aaaea;\n  color: #ffffff;\n  cursor: pointer;\n  border: none;\n  padding: 6px 18px;\n  outline: none;\n  border-radius: 3px;\n  font-size: 1rem;\n  letter-spacing: 1.2px;\n  :hover {\n    background: transparent;\n    border: 1px solid #333333;\n    color: #333333;\n  }\n`;\n\nconst mapStateToProps = store => ({\n  cityList: store.weather\n})\nexport default connect(mapStateToProps)(Form);","import React, { Component } from 'react';\nimport './WeatherItem.css';\n\nclass WeatherItem extends Component {\n  render() {\n    return (\n      <div className={this.props.classList}>\n        <p style={{ paddingLeft: '20px', marginRight: '20px', fontSize: '.9rem', whiteSpace: 'nowrap', height: '40px' }}>\n          {/* Show 'Current' text if date is not available */}\n          <span style={{ whiteSpace: 'nowrap', fontWeight: '700' }}>{this.props.date || 'Current'}</span> <br />\n          <span style={{ textTransform: 'capitalize', fontStyle: 'italic' }}>{this.props.description}</span>\n        </p>\n        <p style={pStyle}>High: {this.props.maxTemp}</p>\n        <p style={pStyle}>Low: {this.props.minTemp}</p>\n      </div>\n    )\n  }\n}\n\nconst pStyle = {\n  marginRight: '25px',\n  marginTop: '10px',\n  fontWeight: '700',\n  fontSize: '1.2rem',\n  whiteSpace: 'nowrap'\n}\n\nexport default WeatherItem;","import React, { Component } from 'react';\n\nimport {withGoogleMap, GoogleMap } from \"react-google-maps\"\n\nconst MyMapComponent = withGoogleMap((props) =>\n  <GoogleMap\n    // Set Zoom of map\n    defaultZoom={12}\n    // Pass lat & lon of city searched\n    defaultCenter={{ lat: props.lat, lng: props.lon }}\n  >\n  </GoogleMap>\n)\n\nclass Map extends Component {\n  render() {\n    return (\n      <MyMapComponent\n        lat={this.props.lat}\n        lon={this.props.lon}\n        googleMapURL='https://maps.googleapis.com/maps/api/js?v=3.exp&key=AIzaSyCYqcIHpBnvZKTUX6K-mT7DY-nze22Dcms'\n        loadingElement={<div style={{ height: `100%` }} />}\n        containerElement={<div style={{ height: `400px` }} />}\n        mapElement={<div style={{ height: `100%` }} />}\n      />\n    )\n  }\n}\n\nexport default Map;","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport WeatherItem from '../WeatherItem/WeatherItem';\nimport './WeatherDisplay.css';\nimport Map from '../Map/Map';\nimport styled from 'styled-components';\nimport moment from 'moment';\n\n\nclass WeatherDisplay extends Component {\n\n  // Round weather to integer\n  getRoundedNumber = (num) => {\n    let roundedNum = Math.round(num);\n    return roundedNum;\n  }\n\n  removeCity = (cityId) => {\n    this.props.dispatch({ type: 'REMOVE_CITY', payload: cityId });\n  }\n\n  render() {\n    return (\n      <ul style={{ paddingLeft: '0' }}>\n        {/* Display searched cities */}\n        {this.props.cityList.map((ci, i) => {\n          return (\n            <div key={i} className=\"city__container\">\n              <div>\n                <h3 className=\"city__title\">{ci.city.name}</h3>\n                <Button onClick={() => this.removeCity(ci.city.id)}>Remove</Button> \n                <div style={{ display: 'flex', flexDirection: 'column' }}>\n                  {/* Forecast display */}\n                  {ci.list.map(temp => {\n                    return (\n                      <WeatherItem\n                        classList=\"weather-item__container container__border\"\n                        key={temp.dt}\n                        // Display date\n                        date={moment(temp.dt_txt).format('MMM Do h a')}\n                        // Display Description\n                        description={temp.weather[0].description}\n                        // Display Max Temp\n                        maxTemp={this.getRoundedNumber(temp.main.temp_max)}\n                        // Display Min Temp\n                        minTemp={this.getRoundedNumber(temp.main.temp_min)}\n                      />\n                    )\n                  })\n                  }\n                </div>\n              </div>\n              {/* Current Weather Display */}\n              <div className=\"item__container\">\n                <WeatherItem\n                  classList=\"weather-item__container\"\n                  // Display Description\n                  description={ci.list[0].weather[0].description}\n                  // Display Max Temp\n                  maxTemp={this.getRoundedNumber(ci.list[0].main.temp_max)}\n                  // Display Min Temp\n                  minTemp={this.getRoundedNumber(ci.list[0].main.temp_min)}\n                />\n                <div className=\"map__container\">\n                  <Map \n                    lat={ci.city.coord.lat}\n                    lon={ci.city.coord.lon}\n                  />\n                </div>\n              </div>\n            </div>\n          )\n        })}\n      </ul>\n    )\n  }\n}\n\nconst mapStateToProps = store => ({\n  cityList: store.weather\n});\n\n\nconst Button = styled.button`\n  background: transparent;\n  color: #333333;\n  cursor: pointer;\n  border: none;\n  padding: 5px 15px;\n  outline: none;\n  border: 1px solid #333333;\n  border-radius: 3px;\n  font-size: .8rem;\n  letter-spacing: 1.2px;\n  margin-left: 5px;\n  display: inline-block;\n  transform: translateY(-5px);\n  :hover {\n    background: #2aaaea;\n    border: none;\n    color: #ffffff;\n  }\n`;\nexport default connect(mapStateToProps)(WeatherDisplay);","import React, { Component } from 'react';\nimport styled from 'styled-components';\nimport './App.css';\n\nimport SearchInput from '../SearchInput/SearchInput';\nimport WeatherDisplay from '../WeatherDisplay/WeatherDisplay';\n\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <Wrapper>\n          <SearchInput />\n          <WeatherDisplay />\n        </Wrapper>\n      </div>\n    );\n  }\n}\n\nconst Wrapper = styled.div`\n  padding-left: 20px;\n  padding-right: 20px;\n  max-width: 1200px;\n  margin-left: auto;\n  margin-right: auto;\n`;\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { createStore, applyMiddleware } from 'redux';\nimport { Provider } from 'react-redux';\nimport createSagaMiddleware from 'redux-saga';\nimport logger from 'redux-logger';\n\nimport * as serviceWorker from './serviceWorker';\n\nimport rootReducer from './redux/reducers';\nimport rootSaga from './redux/sagas';\nimport App from './components/App/App';\n\nconst sagaMiddleware = createSagaMiddleware();\n\n\n// this line creates an array of all of redux middleware you want to use\nconst middlewareList = process.env.NODE_ENV === 'development' ?\n  [sagaMiddleware, logger] :\n  [sagaMiddleware];\n\nconst store = createStore(\n  // tells the saga middleware to use the rootReducer\n  rootReducer,\n  applyMiddleware(...middlewareList),\n);\n\n// rootSaga contains all of our other sagas\nsagaMiddleware.run(rootSaga);\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}